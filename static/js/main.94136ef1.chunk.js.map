{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","marginTop","paddingTop","borderTop","height","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAe,EAARC,GACxB,OACC,yBAAKC,UAAU,uDACZ,yBAAKC,IAAK,SAASC,IAAG,wCAAmCL,EAAnC,mBACtB,6BACA,gCAAOA,EAAP,KACA,2BAAIC,EAAJ,QCMOK,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OAAQ,6BAAMA,EAAOC,KAAI,SAACC,EAAKC,GAE9B,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAASM,EAAOG,GAAGT,aCCNW,EATG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAEhC,OACC,6BACA,2BAAOX,UAAY,4BAA4BY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCsBtFI,G,kBAxBd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACZC,UAAU,GAHM,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACP,yDAGDG,KAAKL,MAAMO,a,GAnBSC,cCwBbC,EAvBA,SAACT,GAEhB,OAAQ,yBAAKU,MACT,CAAEC,UAAW,SACXC,UAAW,OACXC,WAAY,OACZC,UAAW,qBACXC,OAAQ,UAGZf,EAAMO,WCgCOS,E,YApCX,aAAe,IAAD,8BACV,+CAcJC,eAAiB,SAACC,GAAW,EAAKZ,SAAS,CAAEZ,YAAawB,EAAMC,OAAOC,SAbnE,EAAKnB,MAAQ,CACTb,OAAQ,GACRM,YAAa,IAJP,E,iFAQO,IAAD,OAChB2B,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKnB,SAAS,CAAClB,OAAQqC,S,+BAOpC,IAAD,EAAgCpB,KAAKJ,MAA5Bb,EAAT,EAASA,OAAQM,EAAjB,EAAiBA,YAChBgC,EAAiBtC,EAAOuC,QAAO,SAAAC,GAAU,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASpC,EAAYmC,kBAGpG,OAAQzC,EAAO2C,OACX,yBAAK/C,UAAU,MACnB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAgBU,KAAKY,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU7B,OAASsC,OANK,6C,GAvBdlB,aCIEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.94136ef1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n     <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt ='robots' src={`https://robohash.org/set_set3/${name}?size=250x200`}/>\r\n        <div>\r\n        <h2 > {name} </h2> \r\n        <p>{email} </p> \r\n        </div> \r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (<div>{robots.map((user,i) => {\r\n\t\t\r\n\t\treturn (<Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail = {robots[i].email}\r\n\t\t/>);\r\n\t})}</div> );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t<input className = 'ba b--green bg-light-blue' type='search' placeholder='search robots' onChange={searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error, info){\r\n\tthis.setState({hasError: true})\r\n}\r\n\r\n\r\nrender(){\r\n\tif (this.state.hasError){\r\n\t\treturn <h1> Ooops. That is not Good </h1>\r\n\t}\r\n\r\n\treturn this.props.children\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\r\nreturn (<div style={\r\n\t\t\t\t{\toverflowY: 'scroll',\r\n \t\t\t\t\tmarginTop: '10px',\r\n \t\t\t\t\tpaddingTop: '10px',\r\n \t\t\t\t\tborderTop: ' #4AD4C5 2px solid', \r\n \t\t\t\t\theight: '500px' \r\n \t\t\t\t}}\r\n \t\t\t\t>\r\n\t{props.children}\r\n</div>);};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}));\r\n\r\n    }\r\n\r\n    onSearchChange = (event) => {this.setState({ searchfield: event.target.value})\r\n\r\n    }\r\n    render() {const { robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot => {return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n        return !robots.length ? <h1> Loading </h1> :\r\n            <div className='tc'>\r\n        <h1 className='f2'>RoboFriends</h1>\r\n        <SearchBox searchChange = {this.onSearchChange}/>\r\n        <Scroll>\r\n        <ErrorBoundary>\r\n        <CardList robots= {filteredRobots}/>\r\n        </ErrorBoundary>\r\n        </Scroll>\r\n\r\n        </div>\r\n\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker'\nimport 'tachyons';\n\nReactDOM.render( <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}